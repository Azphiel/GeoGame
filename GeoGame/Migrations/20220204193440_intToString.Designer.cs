// <auto-generated />
using GeoGame.Modules;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoGame.Migrations
{
    [DbContext(typeof(GeoGameDbContext))]
    [Migration("20220204193440_intToString")]
    partial class intToString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeoGame.Modules.Answers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("GeoGame.Modules.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("GeoGame.Modules.QuestionAnswer", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("True")
                        .HasColumnType("bit");

                    b.HasKey("QuestionId", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("GeoGame.Modules.QuestionLocalizations", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("QuestionLocalizations");
                });

            modelBuilder.Entity("GeoGame.Modules.Questions", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("GeoGame.Modules.QuestionAnswer", b =>
                {
                    b.HasOne("GeoGame.Modules.Answers", "Answer")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGame.Modules.Questions", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GeoGame.Modules.QuestionLocalizations", b =>
                {
                    b.HasOne("GeoGame.Modules.Location", "Location")
                        .WithMany("QuestionLocalizations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoGame.Modules.Questions", "Question")
                        .WithMany("QuestionLocalizations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GeoGame.Modules.Answers", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("GeoGame.Modules.Location", b =>
                {
                    b.Navigation("QuestionLocalizations");
                });

            modelBuilder.Entity("GeoGame.Modules.Questions", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionLocalizations");
                });
#pragma warning restore 612, 618
        }
    }
}
